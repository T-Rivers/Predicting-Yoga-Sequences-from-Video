# -*- coding: utf-8 -*-
"""Model5_KerasSequential

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fpkDlaFY9oPWduLSEQ4LtEosb0nutRnW
"""

import pandas as pd
import numpy as np
from google.colab import files
import tensorflow as tf
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report
from sklearn.preprocessing import StandardScaler, OneHotEncoder, LabelEncoder
from keras.models import Sequential
from keras.layers import Dense
from keras.optimizers import SGD
from google.colab import drive
from joblib import dump

uploaded = files.upload()

df = pd.read_csv(next(iter(uploaded)))
df.head()

class_name = df['pose_name'].unique()
print(class_name)

#assigning the values of the df to a numpy array
data=df.values

num_rows = data.shape[0]
num_cols = data.shape[1]

print(num_rows)
print(num_cols)

features = data[:, 1:]
target = data[:, 0]

features = np.asarray(features).astype(np.float32)

#splitting test train sets features and labels
features_data_train, features_data_test, target_data_train, target_data_test = train_test_split(features, target, test_size=0.2, random_state=42, shuffle= True)

print("Shape of features_data_train:", features_data_train.shape)
print("Shape of features_data_test:", features_data_test.shape)
print("Shape of target_data_train:", target_data_train.shape)
print("Shape of target_data_test:", target_data_test.shape)

#scaling data
scaler = StandardScaler()
features_data_train = scaler.fit_transform(features_data_train)
features_data_test = scaler.transform(features_data_test)

label_encoder = LabelEncoder()
onehot_encoder = OneHotEncoder(sparse_output=False)

#encode labels
target_reshaped_train = label_encoder.fit_transform(target_data_train)
target_reshaped_test = label_encoder.transform(target_data_test)

#reshape target data for one-hot encoding
target_data_train = target_reshaped_train.reshape(-1, 1)
target_data_test = target_reshaped_test.reshape(-1, 1)

#one-hot encode the labels
target_data_train = onehot_encoder.fit_transform(target_data_train)
target_data_test = onehot_encoder.transform(target_data_test)

np.set_printoptions(threshold=np.inf)
print(target_data_test)

#creating a list of labels from encoded labels/targets
# 0 -19 representing 20 poses
decoded = onehot_encoder.categories_
for i in decoded:
  label_list = i.tolist()
  print(label_list)

#Model5 Keras Sequential
input_dim = features_data_train.shape[1]  #ensure the input dimension is correct
model_keras = Sequential()
model_keras.add(Dense(units=100, activation='relu', input_dim=input_dim))
model_keras.add(Dense(20, activation='softmax'))

model_keras.compile(optimizer=SGD(learning_rate=0.01, momentum=0.9),
                    loss='categorical_crossentropy',
                    metrics=['accuracy'])

model_keras.fit(features_data_train, target_data_train, batch_size=25, epochs=100)

predictions= model_keras.predict(features_data_test)

loss, accuracy = model_keras.evaluate(features_data_test, target_data_test)
print(f"Test Accuracy: {accuracy * 100:.2f}%")

keras_model_results = []
for i in range(len(predictions)):
  arr = predictions[i]
  max_val = max(arr)
  predicted_val = class_name[np.argmax(predictions[i])]

  coded_label_list= list(target_data_test[i])
  max_val_index = coded_label_list.index(max(coded_label_list))
  label_val = class_name[max_val_index]

  formatted_percentage_output = [round(value * 100) for value in arr]
  formatted_percentage_output.append(predicted_val)
  formatted_percentage_output.append(label_val)
  if predicted_val == label_val:
    formatted_percentage_output.append('YES')
  else:
    formatted_percentage_output.append('NO')

  keras_model_results.append(formatted_percentage_output)

from google.colab import files
keras_df = pd.DataFrame(keras_model_results, columns= ['cat pose','chair pose','corpse pose','cow pose','downward dog pose','flat back pose','high lunge pose',\
                                                   'knee to elbow plank pose','knees to chest pose','low lunge pose','mountain pose','runners lunge twist pose',\
                                                   'seated spinal twist pose','side plank yoga pose','standing forward bend pose','tabletop pose','three legged dog pose',\
                                                   'tip toe pose','tree pose','upper plank pose','predicted label','true label','accurate'])
keras_df.to_csv('keras_model_results.csv', index=False)

files.download('/content/keras_model_results.csv')

drive.mount('/content/drive')
model_keras.save('/content/drive/My Drive/Model5_Keras.h5')