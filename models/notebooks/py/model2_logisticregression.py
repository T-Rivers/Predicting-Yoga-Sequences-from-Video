# -*- coding: utf-8 -*-
"""Model2_LogisticRegression

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19fIMbP2aER63lU0vUwgI4rBumxCdf8CL
"""

import pandas as pd
import numpy as np
from google.colab import files
import tensorflow as tf
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import accuracy_score
from joblib import dump
from google.colab import drive

uploaded = files.upload()

df = pd.read_csv(next(iter(uploaded)))
df.head()

class_name = df['pose_name'].unique()
print(class_name)

#assigning the values of the df to a numpy array
data=df.values

num_rows = data.shape[0]
num_cols = data.shape[1]

print(num_rows)
print(num_cols)

#features= pose landmarks, target= pose name
features = data[:, 1:]
target = data[:, 0]

#splitting the data
features_train, features_test, target_train, target_test = train_test_split(features, target, test_size=0.2,random_state=42, shuffle= True)

#Model #2 Logistic Regression
#scaling data
scaler = StandardScaler()
LR_features_train = scaler.fit_transform(features_train)
LR_features_test = scaler.transform(features_test)

model_LR= LogisticRegression()
model_LR.set_params(max_iter=5000)
model_LR.fit(LR_features_train, target_train)

prediction_LR= model_LR.predict(LR_features_test)
print(accuracy_score(target_test, prediction_LR)*100)

#looping through the incorrect predictions
for i in range(len(prediction_LR)):
  if target_test[i] != prediction_LR[i]:
    print(target_test[i],prediction_LR[i])

#for analyzing the data
probability_scores = model_LR.predict_proba(LR_features_test)
predictions_LR = model_LR.predict(LR_features_test)

LR_model_results = []
for i in range(len(predictions_LR)):
    predicted_val = predictions_LR[i]
    label_val = target_test[i]
    arr = probability_scores[i]
    formatted_percentage_output = [round(value * 100, 2) for value in arr]
    formatted_percentage_output.append(predicted_val)
    formatted_percentage_output.append(label_val)
    if predicted_val == label_val:
        formatted_percentage_output.append('YES')
    else:
        formatted_percentage_output.append('NO')

    LR_model_results.append(formatted_percentage_output)

#create a df from the Logistic Regression model results
LR_df = pd.DataFrame(LR_model_results,
                      columns=['cat pose', 'chair pose', 'corpse pose', 'cow pose', 'downward dog pose', 'flat back pose', 'high lunge pose',
                               'knee to elbow plank pose', 'knees to chest pose', 'low lunge pose', 'mountain pose', 'runners lunge twist pose',
                               'seated spinal twist pose', 'side plank yoga pose', 'standing forward bend pose', 'tabletop pose', 'three legged dog pose',
                               'tip toe pose', 'tree pose', 'upper plank pose', 'predicted label', 'true label', 'accurate'])

#aave to a CSV file
LR_df.to_csv('LR_model_results.csv', index=False)

#download the file
files.download('LR_model_results.csv')  # This step is specific to Google Colab

#save model
drive.mount('/content/drive')
dump(model_LR, '/content/drive/My Drive/Model2_LogisticRegression.joblib')

