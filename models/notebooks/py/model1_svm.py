# -*- coding: utf-8 -*-
"""Model1_SVM

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LrtVzfG_UXcYg3UfcnrABZ-1YeSLdzUj
"""

import pandas as pd
import numpy as np
from google.colab import files
import tensorflow as tf
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score
from joblib import dump
from google.colab import drive

#getting the data
uploaded = files.upload()

df = pd.read_csv(next(iter(uploaded)))
df.head()

class_name = df['pose_name'].unique()
print(class_name)

#assigning the values of the df to a numpy array
data=df.values

num_rows = data.shape[0]
num_cols = data.shape[1]

print(num_rows)
print(num_cols)

#features= pose landmarks, target= pose name
features = data[:, 1:]
target = data[:, 0]

#splitting data
features_train, features_test, target_train, target_test = train_test_split(features, target, test_size=0.2,random_state=42, shuffle= True)

#Model #1 - Support Vector Machine
model_svc= SVC(probability=True)
model_svc.fit(features_train, target_train)

prediction_SVC= model_svc.predict(features_test)
print(accuracy_score(target_test, prediction_SVC)*100)

#looping through the incorrect predictions
for i in range(len(prediction_SVC)):
  if target_test[i] != prediction_SVC[i]:
    print(target_test[i],prediction_SVC[i])

#for analyzing the results
probability_scores = model_svc.predict_proba(features_test)
prediction_svc = model_svc.predict(features_test)

svc_model_results = []
for i in range(len(prediction_svc)):
    predicted_val = prediction_svc[i]
    label_val = target_test[i]
    arr = probability_scores[i]
    formatted_percentage_output = [round(value * 100, 2) for value in arr]  #format probabilities as percentages
    formatted_percentage_output.append(predicted_val)  #append predicted class
    formatted_percentage_output.append(label_val)  #append actual label

    #check if prediction matches the label
    if predicted_val == label_val:
        formatted_percentage_output.append('YES')
    else:
        formatted_percentage_output.append('NO')

    svc_model_results.append(formatted_percentage_output)

#create a df from the results
svc_df = pd.DataFrame(svc_model_results,
                      columns=['cat pose','chair pose','corpse pose','cow pose','downward dog pose','flat back pose','high lunge pose',
                               'knee to elbow plank pose','knees to chest pose','low lunge pose','mountain pose','runners lunge twist pose',
                               'seated spinal twist pose','side plank yoga pose','standing forward bend pose','tabletop pose','three legged dog pose',
                               'tip toe pose','tree pose','upper plank pose','predicted label','true label','accurate'])

#save to a CSV file
svc_df.to_csv('SVC_model_results.csv', index=False)

#download the file
files.download('/content/SVC_model_results.csv')

#save model
drive.mount('/content/drive')
dump(model_LR, '//content/drive/My Drive/Model1_SVM.joblib')